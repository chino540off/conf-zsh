##############################
# Repo
##############################
TEST_RED="\033[31;01m"
TEST_GREEN="\033[32;01m"
TEST_YELLOW="\033[33;01m"
TEST_BLUE="\033[34;01m"
TEST_NEUTRAL="\033[0m"

function rpprint()
{
  echo -e "${TEST_BLUE}$@${TEST_NEUTRAL}"
}

function rppush ()
{
  nb=$#
  projects=""
  remote=""
  while [ $nb -gt 0 ]; do
    if [ "$1" = "--remote" -o "$1" = "-r" ]; then
      shift
	remote=$1
	nb=$(( $nb - 1 ))
    else
      projects="$projects $1"
    fi
    shift
    nb=$(( $nb - 1 ))
  done

  if [ ! -z "$remote" ]; then
    repo forall $@ -c 'echo "source ~/.zsh/repo; rpprint Pushing $REPO_PROJECT ..." | zsh ; git push '"$remote"' $REPO_RREV:$REPO_RREV'
  else
    repo forall $@ -c 'echo "source ~/.zsh/repo; rpprint Pushing $REPO_PROJECT ..." | zsh ; git push $REPO_REMOTE $REPO_RREV:$REPO_RREV'
  fi
}

function rpfetch ()
{
  nb=$#
  projects=""
  remote=""
  while [ $nb -gt 0 ]; do
    if [ "$1" = "--remote" -o "$1" = "-r" ]; then
      shift
	remote=$1
	nb=$(( $nb - 1 ))
    else
      projects="$projects $1"
    fi
    shift
    nb=$(( $nb - 1 ))
  done

  if [ ! -z "$remote" ]; then
    repo forall $projects -c 'echo "source ~/.zsh/repo; rpprint Fetching \$REPO_PROJECT ..." | zsh'"; git fetch $remote"
  else
    repo forall $projects -c 'echo "source ~/.zsh/repo; rpprint Fetching $REPO_PROJECT ..."  | zsh; git fetch $REPO_REMOTE'
  fi
}

function rpmerge ()
{
  nb=$#
  projects=""
  remote=""
  while [ $nb -gt 0 ]; do
    if [ "$1" = "--remote" -o "$1" = "-r" ]; then
      shift
	remote=$1
	nb=$(( $nb - 1 ))
    else
      projects="$projects $1"
    fi
    shift
    nb=$(( $nb - 1 ))
  done

  echo $projects

  if [ ! -z "$remote" ]; then
    repo forall $projects -c 'echo "source ~/.zsh/repo; rpprint Merging \$REPO_PROJECT ..." | zsh'"; git merge $remote/\$REPO_RREV"
  else
    repo forall $projects -c 'echo "source ~/.zsh/repo; rpprint Merging $REPO_PROJECT ..."  | zsh; git merge $REPO_REMOTE/$REPO_RREV'
  fi
}

function rpinitbr ()
{
  repo forall $@ -c 'echo "source ~/.zsh/repo; rpprint Init \$REPO_RREV in \$REPO_PROJECT ..." | zsh; git checkout -b $REPO_RREV $REPO_REMOTE/$REPO_RREV --track'
}

function rpstatus ()
{
  repo status $@
}

function rpsync ()
{
  repo sync -j 4
}

#
# rpremote add toto path
#          del toto
#
function rpremote ()
{
	cmd=$1
	shift

	remote=$1
	shift

	if [ "$cmd" = "add" ]; then
		remote_path=$1
		shift
		repo forall $@ -c 'echo "source ~/.zsh/repo; rpprint Add remote '$remote' in \$REPO_PROJECT ..." | zsh; git remote '"$cmd $remote $remote_path/"'$REPO_PROJECT.git'
	else
		repo forall $@ -c 'echo "source ~/.zsh/repo; rpprint Del remote '$remote' in \$REPO_PROJECT ..." | zsh; git remote '"$cmd $remote"
	fi

}

# vim:filetype=zsh
