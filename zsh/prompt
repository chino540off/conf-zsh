# Prompt file

chost="green"
#chost="lightblue"
cpath="blue"
ctime="yellow"
cvcs="green"
crev="yellow"

__vcs_dir() {
  local vcs base_dir sub_dir ref

  sub_dir() {
    local sub_dir
    sub_dir=$(readlink -f "${PWD}")
    sub_dir=${sub_dir#$1}
    echo ${sub_dir#/}
  }

  git_dir() {
    ref=$(git branch 2> /dev/null | egrep '^\*' ) || return 1
    ref=${ref/\* /}
    sub_dir=$(git rev-parse --show-prefix 2> /dev/null)
    sub_dir=${sub_dir/%\//}
    base_dir=$(readlink -f `git rev-parse --git-dir 2> /dev/null` 2> /dev/null)
    base_dir=${base_dir/\/.git/}
    vcs="git"
  }

  svn_dir() {
    [ -d ".svn" ] || return 1
    base_dir="."
    while [ -d "$base_dir/../.svn" ]; do base_dir="$base_dir/.."; done
    base_dir=$(readlink -f "$base_dir")
    sub_dir=$(sub_dir "${base_dir}")
    ref=$(svn info "$base_dir" | awk '/^URL/ { sub(".*/","",$0); r=$0 } /^Revision/ { sub("[^0-9]*","",$0); print r":"$0 }')
    vcs="svn"
  }

  hg_dir() {
    base_dir="."
    while [ ! -d "$base_dir/.hg" ]; do base_dir="$base_dir/.."; [ $(readlink -f "${base_dir}") = "/" ] && return 1; done
    base_dir=$(readlink -f "$base_dir")
    sub_dir=$(sub_dir "${base_dir}")
    ref=$(< "${base_dir}/.hg/branch")
    vcs="hg"
  }

  git_dir ||
  svn_dir ||
  hg_dir ||
  base_dir="$PWD"
  _path="%B%{$fg[$cpath]%}"
  _vcs="%b%{$fg[$cvcs]%}"

  pwd="${_vcs}${vcs:+($vcs)}${_path}${base_dir/$HOME/~}${_vcs}${vcs:+[$ref]${_path}${sub_dir}}"
  local tmp="${vcs:+($vcs)}${base_dir/$HOME/~}${vcs:+[$ref]${sub_dir}}"
  (( pwdsize = ${#${tmp}} + 6))
  export BRANCH="$ref"
}

autoload -U colors
colors

setopt extended_glob

setopt prompt_subst

typeset -A altchar
set -A altchar ${(s..)terminfo[acsc]}
PR_SET_CHARSET="%{$terminfo[enacs]%}"
PR_SHIFT_IN="%{$terminfo[smacs]%}"
PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
PR_HBAR=${altchar[q]:--}
PR_EMPTY_HBAR=" "
PR_ULCORNER=${altchar[l]:--}
PR_LLCORNER=${altchar[m]:--}
PR_LRCORNER=${altchar[j]:--}
PR_URCORNER=${altchar[k]:--}

precmd() {

__vcs_dir

local TERMWIDTH
(( TERMWIDTH = ${COLUMNS} - 2 ))


###
# Truncate the path if it's too long.

PR_FILLBAR=""
PR_PWDLEN=""

local promptsize=${#${(%):---(%n@%m:%l)---()--}}

if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
        ((PR_PWDLEN=$TERMWIDTH - $promptsize))
else
	PR_FILLBAR="\${(l.(($TERMWIDTH - $pwdsize))..${PR_EMPTY_HBAR}.)}"
fi

if [ "$USER" != "root" -a "$USERNAME" != "root" ]; then 
	cuser="white"
else
	cuser="red"
fi

prompt=">"
time="%H:%M"
timestamp="%(?..%B%{$fg[$cpath]%}Err %?%b$clr )%{$fg[$cpath]%}| $clr%{$fg[$ctime]%}%B%D{$time}"

user="%B%{$fg[$cuser]%}%n"
host="%B%{$fg[$chost]%}%m"
backn="\\n"
clr="%{$reset_color%}"

little_line=$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$clr
big_line=$PR_SHIFT_IN$PR_HBAR${(e)PR_FILLBAR}$clr
up_left_corner=$PR_SHIFT_IN$PR_ULCORNER$PR_HBAR$PR_SHIFT_OUT
up_right_corner=$PR_SHIFT_IN$PR_HBAR$PR_URCORNER$PR_SHIFT_OUT
under_left_corner=$PR_SHIFT_IN$PR_LLCORNER$PR_HBAR$PR_SHIFT_OUT
under_right_corner=$PR_SHIFT_IN$PR_LRCORNER$PR_SHIFT_OUT

PS1="$up_left_corner(%{$pwd%}$clr)$big_line$up_right_corner
$under_left_corner($user$clr@$host$clr)$little_line "
RPS1="$little_line($timestamp$clr)$little_line$under_right_corner"

# Term title
case $TERM in
  *xterm*|*rxvt*|(dt|k|E)term)
    print -Pn "\e]0;%n@%m:%~\a"
    #preexec () { print -Pn "\e]0;%n@%m:%~\a $1" }
  ;;
esac
}


# vim:filetype=sh
