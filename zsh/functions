# Functions
TEST_RED="\033[31;01m"
TEST_GREEN="\033[32;01m"
TEST_YELLOW="\033[33;01m"
TEST_BLUE="\033[34;01m"
TEST_NEUTRAL="\033[0m"

##############################
# My Print
# $1: level
# levels:
#   - 1: blue
#   - 2: green
#   - 3: yellow
#   - 4: red
##############################
function my_print()
{
  level=$1
  if [ -z "$1" ]; then
    level='1'
  fi
  shift

  if   [ $level -eq 1 ]; then
    echo -e "${TEST_BLUE}$@${TEST_NEUTRAL}"
  elif [ $level -eq 2 ]; then
    echo -e "${TEST_GREEN}$@${TEST_NEUTRAL}" | sed -e 's/^/  /'
  elif [ $level -eq 3 ]; then
    echo -e "${TEST_YELLOW}$@${TEST_NEUTRAL}" | sed -e 's/^/    /'
  elif [ $level -eq 4 ]; then
    echo -e "${TEST_RED}$@${TEST_NEUTRAL}" | sed -e 's/^/      /'
  fi
}

##############################
# Auto Source
##############################
function auto_source()
{
  cd ~/conf
  br=$(git symbolic-ref HEAD || git-name-rev --name-only HEAD 2>/dev/null)
  br=${br#refs/heads/}
  cd - > /dev/null 2>&1
  my_print 1 "Sourcing my $br conf."
  source ~/.zshrc
}

##############################
# Git Fetch Merge
# $1: remote
##############################
function git_fetch_merge()
{
  remote="$1"
  current_branch=$BRANCH

  if [ -z "$1" ]; then
    remote='origin'
  fi

  my_print 1 "Fetching $remote ..."
  fetch_output=`git fetch $remote 2>&1 | \grep -- '->' | \grep -vE '^From' | \grep -v 'new tag'`
  my_print 2 "$fetch_output"

  my_print 1 "Merge works ..."
  for br in `echo $fetch_output | \grep 'new branch' | tr -s ' 'Â | cut -d' ' -f5`; do
    my_print 2 "Fetching new branch $br"
    git fetch $remote $br:$br
  done

  for br in `echo $fetch_output | \grep -v 'new branch' | tr -s ' ' | cut -d' ' -f3`; do
    if [ -n "`git branch | grep $br`" ]; then
      my_print 2 "Merging $remote/$br in $br"
      if [ "$br" != "$BRANCH" ]; then
	git checkout $br
      fi
      git merge $remote/$br
    else
      my_print 2 "Fetching new branch $br"
      git fetch $remote $br:$br
    fi
  done

  my_print 1 "Return to $current_branch"
  checkout_output=`git checkout $current_branch 2>&1 | cat`
  my_print 3 "$checkout_output"
}

##############################
# ViM
##############################
function v()
{
  if [ $# -eq 1 -o $# -eq 0 ]; then
    gvim --servername 1 --remote $@
  else
    gvim -O2 --servername 1 --remote $@
  fi
}

function vs()
{
  if [ $# -eq 1 -o $# -eq 0 ]; then
    gvim --servername $VIM_SERVER --remote $@
  else
    gvim -O2 --servername $VIM_SERVER --remote $@
  fi
}

function vdiff()
{
    gvimdiff $@
}

##############################
# CScope
# $@: directoies.
##############################
function cs_update()
{
  if [ $# -eq 0 ]; then
    my_print 4 "No input directory"
    return 1
  fi
  cscope -b `find $@ -iname "*.[ch]"`
}

# vim:filetype=zsh
