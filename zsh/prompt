# Prompt file

# init
autoload -U colors
autoload -Uz vcs_info
colors

# set some colors

for COLOR in RED GREEN YELLOW WHITE BLACK CYAN BLUE; do
  eval PR_$COLOR='%{$fg[${(L)COLOR}]%}'        
  eval PR_BRIGHT_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
done                                                
PR_RESET="%{${reset_color}%}";  

# set formats
# %b - branchname
# %u - unstagedstr (see below)
# %c - stangedstr (see below)
# %a - action (e.g. rebase-i)
# %R - repository path
# %S - path in the repository
FMT_VCS="${PR_GREEN}(%s)${PR_RESET}"
FMT_BRANCH="${PR_GREEN}[%b%u%c]${PR_RESET}"				# e.g. master¹²
FMT_ACTION="(${PR_CYAN}%a${PR_RESET}%)"   				# e.g. (rebase-i)
FMT_PATH_PART1="${PR_BRIGHT_BLUE}%R${PR_RESET}"
FMT_PATH_PART2="${PR_BRIGHT_BLUE}%S${PR_RESET}"
FMT_PATH="${FMT_VCS}${FMT_PATH_PART1}${FMT_BRANCH}${FMT_PATH_PART2}"	# e.g. ~/repo/subdir
 
# check-for-changes can be really slow.
# you should disable it, if you work with large repositories   
zstyle ':vcs_info:*:prompt:*' enable git svn hg
zstyle ':vcs_info:*:prompt:*' check-for-changes true
zstyle ':vcs_info:*:prompt:*' unstagedstr '¹'  				# display ¹ if there are unstaged changes
zstyle ':vcs_info:*:prompt:*' stagedstr '²'    				# display ² if there are staged changes
zstyle ':vcs_info:*:prompt:*' actionformats ""		"${FMT_PATH}"
zstyle ':vcs_info:*:prompt:*' formats       ""		"${FMT_PATH}"
zstyle ':vcs_info:*:prompt:*' nvcsformats   ""		"%~"   

setopt extended_glob

setopt prompt_subst

typeset -A altchar
set -A altchar ${(s..)terminfo[acsc]}
PR_SET_CHARSET="%{$terminfo[enacs]%}"
PR_SHIFT_IN="%{$terminfo[smacs]%}"
PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
PR_HBAR=${altchar[q]:--}
PR_EMPTY_HBAR=" "
PR_ULCORNER=${altchar[l]:--}
PR_LLCORNER=${altchar[m]:--}
PR_LRCORNER=${altchar[j]:--}
PR_URCORNER=${altchar[k]:--}
little_line=$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$clr
big_line=$PR_SHIFT_IN$PR_HBAR${(e)PR_FILLBAR}$clr
up_left_corner=$PR_SHIFT_IN$PR_ULCORNER$PR_HBAR$PR_SHIFT_OUT
up_right_corner=$PR_SHIFT_IN$PR_HBAR$PR_URCORNER$PR_SHIFT_OUT
under_left_corner=$PR_SHIFT_IN$PR_LLCORNER$PR_HBAR$PR_SHIFT_OUT
under_right_corner=$PR_SHIFT_IN$PR_LRCORNER$PR_SHIFT_OUT

function precmd()
{
  vcs_info 'prompt'

  # Term title
  case $TERM in
    *xterm*|*rxvt*|(dt|k|E)term)
      print -Pn "\e]0;%n@%m:%~\a"
      #preexec () { print -Pn "\e]0;%n@%m:%~\a $1" }
    ;;
  esac
}

function lprompt
{
  local brackets=$1
  local color1=$2 
  local color2=$3 
   
  local bracket_open="${color1}${brackets[1]}${PR_RESET}"
  local bracket_close="${color1}${brackets[2]}"         
  local at="${PR_BRIGHT_WHITE}@${PR_RESET}"                       

  if [ "$USER" != "root" -a "$USERNAME" != "root" ]; then 
    local user_host="${PR_BRIGHT_WHITE}%n${at}${PR_BRIGHT_GREEN}%m${PR_RESET}"
  else
    local user_host="${PR_BRIGHT_RED}%n${at}${PR_BRIGHT_GREEN}%m${PR_RESET}"
  fi
   
  local vcs_cwd='${${vcs_info_msg_1_%%.}/$HOME/~}'
  local cwd="${PR_BRIGHT_BLUE}${vcs_cwd}${PR_RESET}"
  local my_prompt="${PR_BRIGHT_WHITE}>${PR_RESET}"
   
  PROMPT="$up_left_corner${PR_RESET}${bracket_open}${cwd}${bracket_close}$little_line
$under_left_corner(${user_host}${PR_RESET})$little_line "
} 

function rprompt
{
  local brackets=$1
  local color1=$2 
  local color2=$3 
   
  local bracket_open="${color1}${brackets[1]}${PR_RESET}"
  local bracket_close="${color1}${brackets[2]}${PR_RESET}"
   
  local time="%H:%M"
  local timestamp="%(?..${PR_BRIGHT_RED}Err %?%b${PR_RESET} | )${PR_BRIGHT_YELLOW}%B%D{$time}"
  RPROMPT="$little_line${PR_RESET}${bracket_open}${timestamp}${bracket_close}${PR_RESET}"
}
 
lprompt '()' $BR_BRIGHT_BLACK $PR_WHITE
rprompt '()' $BR_BRIGHT_BLACK $PR_WHITE

# vim:filetype=zsh
